#! /bin/sh
# vim: set tabstop=4 syntax=sh :
#######################################################################################################
#                                                                                                     #
# compute the cipher key for AVM's implementation from a specified password                           #
#                                                                                                     #
###################################################################################################VER#
#                                                                                                     #
# user_password, version 0.3, from decode_passwords                                                   #
#                                                                                                     #
# This script is a part of the project from https://github.com/PeterPawn/decode_passwords.            #
#                                                                                                     #
###################################################################################################CPY#
#                                                                                                     #
# Copyright (C) 2014-2017 P.Haemmerlein (peterpawn@yourfritz.de)                                      #
#                                                                                                     #
###################################################################################################LIC#
#                                                                                                     #
# This project is free software, licensed under a slightly modified GPL version; most people          #
# can redistribute it and/or modify it under the terms of the GNU General Public License as           #
# published by the Free Software Foundation; either version 2 of the License, or (at your             #
# option) any later version.                                                                          #
#                                                                                                     #
# This project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;           #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.           #
# See the GNU General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more          #
# details.                                                                                            #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script simply computes a MD5 hash of the specified password. This hash (padded to 32 bytes) is  #
# used by AVM's implementation instead of the hash computed from the 'device identity' to encode or   #
# decode an export file.                                                                              #
#                                                                                                     #
#######################################################################################################
usage_text()
{
	__purpose_hdr
	__nl "This script generates a key, based on the specified password. The key may be used for the"
	__nl "first stage of decryption for an export file or for decryption of a single value (with"
	__nl "another script named "; __bold "decode_secret"; printf ").\n"
	__nl "An export file has to be created with a user-specified password or the decryption will fail,"
	__nl "because the device's secret key - computed from only two device properties - was used to"
	__nl "encrypt the key for the second stage.\n"
	__nl "The generated key will be written as hexadecimal string to STDOUT."
	__usage_hdr
	__usage_opt "options"; __usage_opt_end; __usage_arg "password"
	__usage_end
	__options_hdr
	__option_debug
	__option_help
	__option_version
	__options_end
	__nl "If "; __undl "password"; printf " starts with a hyphen, you have to insert '--' in front of it."
}
. yf_usage_helpers
__required_scripts="crypto"
#######################################################################################################
#                                                                                                     #
# check parameters                                                                                    #
#                                                                                                     #
#######################################################################################################
$__help_option__
$__version_option__
$__debug_option__
$__options_end__
if [ $# -lt 1 ]; then
	__emsg "Missing the password to use."
	exit 1
fi
password="$1"
#######################################################################################################
#                                                                                                     #
# check environment                                                                                   #
#                                                                                                     #
#######################################################################################################
$__set_base_dir__
$__check_required_scripts__
#######################################################################################################
#                                                                                                     #
# compute the hash now                                                                                #
#                                                                                                     #
#######################################################################################################
printf "%s" "$password" | "$crypto" digest $__debug_text__
exit $?
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
