#! /bin/sh
# vim: set tabstop=4 syntax=sh :
#######################################################################################################
#                                                                                                     #
# compute the cipher key for AVM's implementation from a specified password                           #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# Copyright (C) 2014-2017 P.HÃ¤mmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
# Have a look on the help screen content below and into the README.md file for the whole project, to  #
# find the terms of the license.                                                                      #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script simply computes a MD5 hash of the specified password. This hash (padded to 32 bytes) is  #
# used by AVM's implementation instead of the hash computed from the 'device identity' to encode or   #
# decode an export file.                                                                              #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# check help request                                                                                  #
#                                                                                                     #
#######################################################################################################
__bold__="$(printf "%b[1m" "\033")"
__rset__="$(printf "%b[0m" "\033")"
__undl__="$(printf "%b[4m" "\033")"
__red__="$(printf "%b[31m" "\033")"
__whit__="$(printf "%b[37m" "\033")"
if [ "$1" = "-h" -o "$1" = "--help" ]; then
	exec 1>&2-
	printf -- "\nCopyright (C) 2014-2017 P.Haemmerlein (peterpawn@yourfritz.de)\n\n"
	printf -- "This program is free software, licensed under a slightly modified GPL version; most people\n"
	printf -- "can redistribute it and/or modify it under the terms of the GNU General Public License as\n"
	printf -- "published by the Free Software Foundation; either version 2 of the License, or (at your\n"
	printf -- "option) any later version.\n\n"
	printf -- "This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n"
	printf -- "without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"
	printf -- "See the GNU General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more\n"
	printf -- "details.\n\n"
	printf -- "%sPurpose:%s\n\n" "$__bold__" "$__rset__"
	printf -- "This script is a part of the project from https://github.com/PeterPawn/decode_passwords.\n\n"
	printf -- "It generates a key, based on the specified %spassword%s. The key may be used for the first\n" "$undl" "$rset"
	printf -- "stage of decryption for an export file or for decryption of a single value (with another\n"
	printf -- "script named %sdecode_secret%s).\n\n" "$__bold__" "$__rset__"
	printf -- "An export file has to be created with a user-specified password or the decryption will fail,\n"
	printf -- "because the device's secret key - computed from only two device properties - was used to\n"
	printf -- "encrypt the key for the second stage.\n\n"
	printf -- "The generated key will be written as hexadecimal string to STDOUT.\n\n"
	printf -- "%sUsage:%s\n" "$__bold__" "$__rset__"
	printf -- "\t%suser_password%s [ %soptions%s ] %spassword%s\n\n" "$__bold__" "$__rset__" "$__undl__" "$__rset__" "$__undl__" "$__rset__"
	printf -- "Supported %soptions%s are:\n\n" "$__undl__" "$__rset__"
	printf -- "-d, --debug - (possibly) display some debug information on STDERR\n\n"
	printf -- "All unknown options are assumed to be the required %spassword%s.\n\n" "$__undl__" "$__rset__"
	exit 1
fi
#######################################################################################################
#                                                                                                     #
# check debug option                                                                                  #
#                                                                                                     #
#######################################################################################################
if [ "$1" = "-d" -o "$1" = "--debug" ]; then
	debug=1
	dbg="-d"
	shift
else
	debug=0
fi
#######################################################################################################
#                                                                                                     #
# check parameters                                                                                    #
#                                                                                                     #
#######################################################################################################
if [ $# -lt 1 ]; then
	printf "%suser_password%s: %sMissing the password to use.%s\a\n" "$__bold__$__red__" "$__rset__" "$__bold__" "$__rset__" 1>&2
	exit 1
fi
password="$1"
#######################################################################################################
#                                                                                                     #
# compute the hash now                                                                                #
#                                                                                                     #
#######################################################################################################
printf "%s" "$password" | crypto digest $dbg
exit $?
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
