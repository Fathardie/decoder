#! /bin/sh
# vim: set tabstop=4 syntax=sh :
#######################################################################################################
#                                                                                                     #
# read the variables for the device password from the 'urlader environment' and compute the device    #
# cipher key from them                                                                                #
#                                                                                                     #
###################################################################################################VER#
#                                                                                                     #
# password_from_device, version 0.3, from decode_passwords                                            #
#                                                                                                     #
# This script is a part of the project from https://github.com/PeterPawn/decode_passwords.            #
#                                                                                                     #
###################################################################################################CPY#
#                                                                                                     #
# Copyright (C) 2014-2017 P.Haemmerlein (peterpawn@yourfritz.de)                                      #
#                                                                                                     #
###################################################################################################LIC#
#                                                                                                     #
# This project is free software, licensed under a slightly modified GPL version; most people          #
# can redistribute it and/or modify it under the terms of the GNU General Public License as           #
# published by the Free Software Foundation; either version 2 of the License, or (at your             #
# option) any later version.                                                                          #
#                                                                                                     #
# This project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;           #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.           #
# See the GNU General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more          #
# details.                                                                                            #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# Copyright (C) 2014-2017 P.HÃ¤mmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU  #
# General Public License as published by the Free Software Foundation; either version 2 of the        #
# License, or (at your option) any later version.                                                     #
#                                                                                                     #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without   #
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      #
# General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more details.             #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script should be called from a FRITZ!OS environment (or at least the file for the 'urlader      #
# environment' must be present) and it reads the variable components for the device cipher key from   #
# the 'urlader environment' file on procfs.                                                           #
# If the option '-e' (or '--export') is specified, a hash value to be used as export password is      #
# computed (it contains less device specific values).                                                 #
#                                                                                                     #
#######################################################################################################
usage_text()
{
	__purpose_hdr
	__nl "This script computes the device-specific key used to encrypt values stored in TFFS files."
	__usage_hdr
	__usage_opt "options"
	__usage_end
	__options_hdr
	__nl; __option_show_opt 24 "-a" "--alt-env" "filename"; __option_show_desc "use an alternative source for the 'urlader environment'"
	__nl; __option_show_opt 24 "-e" "--export"; __option_show_desc "create a key usable for a settings export file"
	__option_debug 24
	__option_help 24
	__option_version 24
	__options_end
	__nl "The script reads the device properties "; __undl "$serial_name"; printf ", "; __undl "$maca_name"; \
		printf " and "; __undl "$wlan_key_name"; printf " from the procfs on"
	__nl "a FRITZ!OS device (or from an alternative source) and computes the key used to encrypt"
	__nl "security-related settings in TFFS files. If the device in question has a configured CWMP"
	__nl "account (for TR-069 communications), the property "; __undl "$tr069_pw_name"; printf " is added to this key.\n"
	__nl "The 'urlader environment' is usually available with a fixed path name on procfs, but"
	__nl "while a FRITZ!OS device is started, a copy will be created in '$alternative_environment'. If the script"
	__nl "can not read the file from procfs (it may be missing in a chroot-jail), it tries to open"
	__nl "this copy instead. If the script is used outside of FRITZ!OS, this alternative path can"
	__nl "be overridden with an option (see above).\n"
	__nl "The key used to encrypt export files, if they're created without an user-defined"
	__nl "password, differs from the key for internal storage. If you need an export key"
	__nl "for a device, you may specify an option to created such one."
}
. yf_usage_helpers
__required_scripts="device_password crypto"
#######################################################################################################
#                                                                                                     #
# constants                                                                                           #
#                                                                                                     #
#######################################################################################################
urlader_environment="/proc/sys/urlader/environment"
alternative_environment="/var/env" # AVM stores a copy here at boot time
serial_name="SerialNumber"
maca_name="maca"
wlan_key_name="wlan_key"
tr069_pw_name="tr069_passphrase"
#######################################################################################################
#                                                                                                     #
# check parameters                                                                                    #
#                                                                                                     #
#######################################################################################################
$__help_option__
$__version_option__
$__debug_option__
export=0
while [ $# -gt 0 ]; do
	if __check_option "$1" "-e" "--export" >/dev/null; then
		export=1
		shift
		continue
	fi
	if __check_option "$1" "-a" "--alt-env" >/dev/null; then
		if [ ${#2} -eq 0 ] || __is_option "$2"; then
			__emsg "Missing file name after option '%s'." "$1"
			exit 1
		else
			alternative_environment="$2"
			shift 2
			continue
		fi
	fi
	__is_last_option "$1" && shift && break
	__emsg "Unknown option '%s'." "$1" && exit 1
done
#######################################################################################################
#                                                                                                     #
# check environment                                                                                   #
#                                                                                                     #
#######################################################################################################
$__set_base_dir__
if ! [ -f "$urlader_environment" ] && ! [ -f "$alternative_environment" ]; then
	__emsg "Neither the file '%s' nor the alternative '%s' exist." "$urlader_environment" "$alternative_environment"
	exit 1
elif ! [ -f "$urlader_environment" ]; then
	env="$alternative_environment"
else
	env="$urlader_environment"
fi
$__check_required_scripts__
#######################################################################################################
#                                                                                                     #
# read data from environment                                                                          #
#                                                                                                     #
#######################################################################################################
serial="$(sed -n -e "s|^$serial_name[ \t]*\(.*\)\$|\1|p" "$env")"
__debug "found serial number '%s'\n" "$serial"
maca="$(sed -n -e "s|^$maca_name[ \t]*\(.*\)\$|\1|p" "$env")"
__debug "found maca value '%s'\n" "$maca"
if [ $export -eq 0 ]; then
	wlan_key="$(sed -n -e "s|^$wlan_key_name[ \t]*\(.*\)\$|\1|p" "$env")"
	__debug "found WLAN key '%s'\n" "$wlan_key"
	tr069_passphrase="$(sed -n -e "s|^$tr069_pw_name[ \t]*\(.*\)\$|\1|p" "$env")"
	if __is_debug; then
		[ ${#tr069_passphrase} -gt 0 ] && \
			 __debug "found TR-069 passphrase '%s'\n" "$tr069_passphrase" || \
			 __debug "no TR-069 passphrase found\n"
	fi
fi
#######################################################################################################
#                                                                                                     #
# compute the hash now                                                                                #
#                                                                                                     #
#######################################################################################################
$device_password $__debug_text__ $serial $maca $wlan_key $tr069_passphrase
exit $?
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
