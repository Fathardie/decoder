#! /bin/sh
# vim: set tabstop=4 syntax=sh :
#######################################################################################################
#                                                                                                     #
# read the variables for the device password from the 'urlader environment' and compute the device    #
# cipher key from them                                                                                #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# Copyright (C) 2014-2017 P.HÃ¤mmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU  #
# General Public License as published by the Free Software Foundation; either version 2 of the        #
# License, or (at your option) any later version.                                                     #
#                                                                                                     #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without   #
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      #
# General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more details.             #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script has to be called from a FRITZ!OS environment (or at least the file for the 'urlader      #
# environment' must be present) and it reads the variable components for the device cipher key from   #
# the 'urlader environment' file on procfs.                                                           #
# If the option '-e' (or '--export') is specified, a hash value to be used as export password is      #
# computed (it contains less device specific values).                                                 #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# constants                                                                                           #
#                                                                                                     #
#######################################################################################################
urlader_environment="/proc/sys/urlader/environment"
alternative_environment="/var/env" # AVM stores a copy here at boot time
serial_name="SerialNumber"
maca_name="maca"
wlan_key_name="wlan_key"
tr069_pw_name="tr069_passphrase"
needed_scripts="device_password crypto"
#######################################################################################################
#                                                                                                     #
# check options                                                                                       #
#                                                                                                     #
#######################################################################################################
export=0
debug=0
while [ $# -gt 0 ]; do
	case "$1" in
		("-d" | "--debug")
			debug=1
			dbg="-d"
			shift
			;;
		("-e" | "--export")
			export=1
			shift
			;;
		("-a" | "--alt-environ")
			if [ ${#2} -eq 0 ]; then
				printf "Missing file name after '%s' option.\n" "$1" 1>&2
				exit 1
			fi
			alternative_environment="$2"
			shift 2
			;;
		(*)
			printf "Invalid parameter/option '%s' found on command line.\n" "$1" 1>&2
			exit 1
			;;
	esac
done
#######################################################################################################
#                                                                                                     #
# check environment                                                                                   #
#                                                                                                     #
#######################################################################################################
if ! [ -f "$urlader_environment" ] && ! [ -f "$alternative_environment" ]; then
	printf "Neither the file '%s' nor the alternative '%s' exist.\n" "$urlader_environment" "$alternative_environment" 1>&2
	exit 1
elif ! [ -f "$urlader_environment" ]; then
	env="$alternative_environment"
else
	env="$urlader_environment"
fi
[ "$(expr "$0" : ".*\(/\).*")" = "/" ] && d="${0%/*}" || d="."
for n in $needed_scripts; do
	eval $n="$d/$n"
	eval f="\$$n"
	if ! [ -x "$f" ]; then
		printf "Missing another needed executable (%s).\n" "$n" 1>&2
		exit 1
	fi
done
#######################################################################################################
#                                                                                                     #
# read data from environment                                                                          #
#                                                                                                     #
#######################################################################################################
serial="$(sed -n -e "s|^$serial_name[ \t]*\(.*\)\$|\1|p" "$env")"
[ $debug -eq 1 ] && printf "found serial number '%s'\n" "$serial" 1>&2
maca="$(sed -n -e "s|^$maca_name[ \t]*\(.*\)\$|\1|p" "$env")"
[ $debug -eq 1 ] && printf "found maca value '%s'\n" "$maca" 1>&2
if [ $export -eq 0 ]; then
	wlan_key="$(sed -n -e "s|^$wlan_key_name[ \t]*\(.*\)\$|\1|p" "$env")"
	[ $debug -eq 1 ] && printf "found WLAN key '%s'\n" "$wlan_key" 1>&2
	tr069_passphrase="$(sed -n -e "s|^$tr069_pw_name[ \t]*\(.*\)\$|\1|p" "$env")"
	if [ $debug -eq 1 ]; then
		[ ${#tr069_passphrase} -gt 0 ] && \
			 printf "found TR-069 passphrase '%s'\n" "$tr069_passphrase" 1>&2 || \
			 printf "no TR-069 passphrase found\n" 1>&2
	fi
fi
#######################################################################################################
#                                                                                                     #
# compute the hash now                                                                                #
#                                                                                                     #
#######################################################################################################
$device_password $dbg $serial $maca $wlan_key $tr069_passphrase
exit $?
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
