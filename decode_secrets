#! /bin/sh
# vim: set tabstop=4 syntax=sh :
#######################################################################################################
#                                                                                                     #
# decode every occurence of an encoded secret value from a file                                       #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# Copyright (C) 2014-2017 P.HÃ¤mmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU  #
# General Public License as published by the Free Software Foundation; either version 2 of the        #
# License, or (at your option) any later version.                                                     #
#                                                                                                     #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without   #
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      #
# General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more details.             #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script takes the input file from STDIN, extracts all occurences of encrypted values (4 dollar   #
# signs followed by data from the limited character set composed of A to Z and 1 to 6) and calls the  #
# 'decode_secret' script for each of them.                                                            #
# In a last step, the input file is processed by 'sed' and the encoded secrets are replaces with the  #
# appropriate clear-text values.                                                                      #
#                                                                                                     #
# The script accepts none, one or more parameters and their number decides, which decryption mode     #
# will be selected. Without parameters, the device identity will be used (this will work only on a    #
# FRITZ!Box device). With a single parameter, this will be assumed to be a hexadecimal presentation   #
# of the key to be used for deciphering. And with even more parameters (up to 4), the decipher key    #
# will be derived from the specified properties of a FRITZ!OS device.                                 #
#                                                                                                     #
# This script is the replacement for the former script 'decode_passwords' in version 0.2, but it's a  #
# lot slower due to the overhead of shell programming. If you need more speed, you should consider to #
# use a compiled version.                                                                             #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# constants                                                                                           #
#                                                                                                     #
#######################################################################################################
needed_scripts="password_from_device device_password decode_secret"
#######################################################################################################
#                                                                                                     #
# subfunctions                                                                                        #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# process encoded data entries                                                                        #
#                                                                                                     #
#######################################################################################################
__process_secret_value()
{
	while read line; do
		encoded="$(expr "$line" : "[\$]\{4\}\(.*\)")"
		decoded="$($decode_secret "$encoded" "$1" 2>/dev/null)"
		[ $? -ne 0 ] && continue # decode error
		[ $debug -eq 1 ] && printf "decoded '%s' to '%s'\n" "$line" "$decoded" 1>&2
		[ ${#decoded} -gt 0 ] && decoded="$(printf "%s" "$decoded" | sed -f "$2")"
		printf "s|$line|$decoded|\n"
	done
}
#######################################################################################################
#                                                                                                     #
# check environment                                                                                   #
#                                                                                                     #
#######################################################################################################
for n in $needed_scripts; do
	[ "$(expr "$0" : ".*\(/\).*")" = "/" ] && d="${0%/*}" || d="."
	eval $n="$d/$n"
	eval f="\$$n"
	if ! [ -x "$f" ]; then
		printf "Missing another needed executable (%s).\n" "$n" 1>&2
		exit 1
	fi
done
#######################################################################################################
#                                                                                                     #
# create temporary directory                                                                          #
#                                                                                                     #
#######################################################################################################
td=$(crypto mktemp -d)
if [ ${#td} -eq 0 ]; then
	printf "Error creating a temporary directory.\n" 1>&2
	exit 1
fi
trap "exit 1" INT HUP
trap "rm -r $td 2>/dev/null" EXIT
#######################################################################################################
#                                                                                                     #
# check options                                                                                       #
#                                                                                                     #
#######################################################################################################
debug=0
tty=0
mimicry=0
for x in $*; do
	case "$x" in
		("-d" | "--debug")
			debug=1
			shift
			;;
		("-t" | "--tty")
			tty=1
			shift
			;;
		("--")
			shift
			break
			;;
		(-*)
			printf "Unknown option '%s' specified.\n" "$x" 1>&2
			exit 1
			;;
		(*)
			break;
	esac
done
#######################################################################################################
#                                                                                                     #
# check parameters                                                                                    #
#                                                                                                     #
#######################################################################################################
[ $# -ge 2 ] && mimicry=1 || mimicry=0
[ $# -eq 1 ] && key=1 || key=0
#######################################################################################################
#                                                                                                     #
# check input file                                                                                    #
#                                                                                                     #
#######################################################################################################
if [ -t 0 ]; then
	if [ $tty -eq 0 ]; then
		printf "STDIN is a terminal device. If this was an intended call, specify the '-t' option to read input data from terminal.\n" 1>&2
		exit 1
	fi
fi
cat - >"$td/input"
[ -s "$td/input" ] || exit 0 # empty input file
#######################################################################################################
#                                                                                                     #
# extract encoded values from input file, prepare the device key and decode the encrypted values one  #
# by one                                                                                              #
#                                                                                                     #
#######################################################################################################
sed -n -e "s|.*\(\$\$\$\$[A-Z1-6]*\).*|\1|p" <"$td/input" 2>/dev/null | sed -e "/^[ \t]*\$/d" >"$td/encoded" 2>/dev/null
touch "$td/commands"
if [ -s "$td/encoded" ]; then
	if [ $mimicry -eq 1 ]; then
		cipher_key="$($device_password $*)"
		if [ ${#cipher_key} -eq 0 ]; then
			printf "Error computing cipher key, please specify all needed values for the call to '%s'.\n" "$device_password" 1>&2
			exit 1
		fi
		[ $debug -eq 1 ] && printf "mimicry mode for device cipher key '%s'\n" "$cipher_key" 1>&2
	elif [ $key -eq 0 ]; then
		cipher_key="$($password_from_device)"
		if [ ${#cipher_key} -eq 0 ]; then
			printf "Error computing device cipher key, maybe it's not a FRITZ!OS system?\n" 1>&2
			exit 1
		fi
		[ $debug -eq 1 ] && printf "decode with device cipher key '%s'\n" "$cipher_key" 1>&2
	else
		cipher_key="$1"
		[ $debug -eq 1 ] && printf "decode with specified cipher key '%s'\n" "$cipher_key" 1>&2
	fi
	escapes="$td/escapes"
	cat >"$escapes" <<'EOT'
s|\\|\\\\\\\\\\\\\\\\|g
s|&|\\\\&|g
s/|/\\\\|/g
s|"|\\\\\\\\"|g
EOT
	__process_secret_value "$cipher_key" "$escapes" <"$td/encoded" >"$td/commands"
fi
#######################################################################################################
#                                                                                                     #
# write the decoded data to STDOUT                                                                    #
#                                                                                                     #
#######################################################################################################
sed -f "$td/commands" <"$td/input"
#######################################################################################################
#                                                                                                     #
# no housekeeping needed, temporary data will be cleaned up by our trap command above                 #
#                                                                                                     #
#######################################################################################################
exit 0
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
