#! /bin/sh
# vim: set tabstop=4 syntax=sh :
#######################################################################################################
#                                                                                                     #
# compute the device password for a FRITZ!Box router                                                  #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# Copyright (C) 2014-2017 P.HÃ¤mmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU  #
# General Public License as published by the Free Software Foundation; either version 2 of the        #
# License, or (at your option) any later version.                                                     #
#                                                                                                     #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without   #
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      #
# General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more details.             #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script takes the variable components of a FRITZ!Box device "identity" and computes the MD5 hash #
# used internally as device password for various encryptions. This isn't the same as the character    #
# string from "privatekeypassword", another project of mine on GitHub.                                #
#                                                                                                     #
# For this computation the following values are needed:                                               #
# - device serial number from the 'urlader environment' - it was 16 times '0' for a long time, but on #
#   newer devices AVM has really integrated the serial number from the back of the device             #
# - the content of 'maca' address from the 'urlader environment' - it can be taken from any contact   #
#   to the LAN side of the device or from various other network activities (where it's sometimes      #
#   called 'Serial' instead of the value above), JUIS check requests or TR-069 INFORM requests are a  #
#   commonly used source for this value, if you've only access to the WAN side of the box             #
# - the factory-set WLAN key - it's shown on the back of the router too and may be read with TR-069   #
#   functions or - if you've access to the GUI or a print-out of the current QR code and the owner    #
#   did not change the factory key - from a running device                                            #
# - if the device has a CWMP account configured, the value of 'tr069_passphrase' (also printed on the #
#   back of the device) is needed as another variable                                                 #
#                                                                                                     #
# No matter, where you did get the data from, the password is computed as a MD5 hash of these two,    #
# three or four components, with a newline character between them (but not after the WLAN key and a   #
# TR-069 passphrase).                                                                                 #
#                                                                                                     #
# If you'd like to compute the password for a configuration export file, which was created without a  #
# specified password, you may omit the WLAN key and the TR-069 passphrase and the computed hash value #
# can then be used to decrypt such a file.                                                            #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# check debug option                                                                                  #
#                                                                                                     #
#######################################################################################################
if [ "$1" = "-d" -o "$1" = "--debug" ]; then
	debug=1
	shift
else
	debug=0
fi
#######################################################################################################
#                                                                                                     #
# check parameters                                                                                    #
#                                                                                                     #
#######################################################################################################
if [ $# -lt 2 ]; then
	printf "Missing at least one argument, please read the description from the comment block at the beginning of this script file.\n" 1>&2
	exit 1
fi
serial="$1"
if [ ${#serial} -ne 16 ]; then
	printf "The specified serial number '%s' should contain exactly 16 characters.\n" "$serial" 1>&2
	exit 1
fi
maca="$2"
if [ ${#maca} -ne 17 ]; then
	printf "The specified MAC address '%s' should contain exactly 17 characters.\n" "$maca" 1>&2
	exit 1
fi
wlan_key="$3"
if [ ${#wlan_key} -gt 0 ] && [ ${#wlan_key} -ne 16 ] && [ ${#wlan_key} -ne 20 ]; then
	printf "A correct WLAN key contains 16 or 20 (decimal) numbers, you specified this one: '%s'.\n" "$wlan_key" 1>&2
	exit 1
fi
if [ ${#wlan_key} -gt 0 ]; then
	if [ ${#4} -gt 0 ]; then # append TR-069 passphrase without newline
		wlan_key="$wlan_key$4"
	fi
fi
if ! [ "$(expr "$maca" : "\([A-F0-9:]*\)")" = "$maca" ]; then
	printf "The specified MAC address '%s' contains unexpected characters.\n" "$maca" 1>&2
	exit 1
fi
#######################################################################################################
#                                                                                                     #
# compute the hash now                                                                                #
#                                                                                                     #
#######################################################################################################
printf "%s\n%s\n%s" "$serial" "$maca" "$wlan_key" | crypto digest $dbg
exit $?
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
