#! /bin/sh
# vim: set tabstop=4 syntax=sh :
#######################################################################################################
#                                                                                                     #
# compute the device password for a FRITZ!Box router                                                  #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# Copyright (C) 2014-2017 P.HÃ¤mmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
# Have a look on the help screen content below and into the README.md file for the whole project, to  #
# find the terms of the license.                                                                      #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script takes the variable components of a FRITZ!Box device "identity" and computes the MD5 hash #
# used internally as device password for various encryptions. This isn't the same as the character    #
# string from "privatekeypassword", another project of mine on GitHub.                                #
#                                                                                                     #
# For this computation the following values are needed:                                               #
# - device serial number from the 'urlader environment' - it was 16 times '0' for a long time, but on #
#   newer devices AVM has really integrated the serial number from the back of the device             #
# - the content of 'maca' address from the 'urlader environment' - it can be taken from any contact   #
#   to the LAN side of the device or from various other network activities (where it's sometimes      #
#   called 'Serial' instead of the value above), JUIS check requests or TR-069 INFORM requests are a  #
#   commonly used source for this value, if you've only access to the WAN side of the box             #
# - the factory-set WLAN key - it's shown on the back of the router too and may be read with TR-069   #
#   functions or - if you've access to the GUI or a print-out of the current QR code and the owner    #
#   did not change the factory key - from a running device                                            #
# - if the device has a CWMP account configured, the value of 'tr069_passphrase' (also printed on the #
#   back of the device) is needed as another variable                                                 #
#                                                                                                     #
# No matter, where you did get the data from, the password is computed as a MD5 hash of these two,    #
# three or four components, with a newline character between them (but not after the WLAN key and a   #
# TR-069 passphrase).                                                                                 #
#                                                                                                     #
# If you'd like to compute the password for a configuration export file, which was created without a  #
# specified password, you may omit the WLAN key and the TR-069 passphrase and the computed hash value #
# can then be used to decrypt such a file.                                                            #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# check help request                                                                                  #
#                                                                                                     #
#######################################################################################################
__bold__="$(printf "%b[1m" "\033")"
__rset__="$(printf "%b[0m" "\033")"
__undl__="$(printf "%b[4m" "\033")"
__red__="$(printf "%b[31m" "\033")"
__whit__="$(printf "%b[37m" "\033")"
if [ "$1" = "-h" -o "$1" = "--help" ]; then
	exec 1>&2-
	printf -- "\nCopyright (C) 2014-2017 P.Haemmerlein (peterpawn@yourfritz.de)\n\n"
	printf -- "This program is free software, licensed under a slightly modified GPL version; most people\n"
	printf -- "can redistribute it and/or modify it under the terms of the GNU General Public License as\n"
	printf -- "published by the Free Software Foundation; either version 2 of the License, or (at your\n"
	printf -- "option) any later version.\n\n"
	printf -- "This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n"
	printf -- "without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"
	printf -- "See the GNU General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more\n"
	printf -- "details.\n\n"
	printf -- "%sPurpose:%s\n\n" "$__bold__" "$__rset__"
	printf -- "This script is a part of the project from https://github.com/PeterPawn/decode_passwords.\n\n"
	printf -- "It accepts up to four parameters on the command line (each of them stands for a property\n"
	printf -- "from the urlader environment of a FRITZ!OS device) and generates a device-specific\n"
	printf -- "encryption key from their values.\n\n"
	printf -- "The generated key will be written as hexadecimal string to STDOUT.\n\n"
	printf -- "%sUsage:%s\n" "$__bold__" "$__rset__"
	printf -- "\t%sdevice_password%s [ %soptions%s ] %sprop1%s %sprop2%s [ %sprop3%s [ %sprop4%s ] ]\n\n" \
		"$__bold__" "$__rset__" "$__undl__" "$__rset__" "$__undl__" "$__rset__" "$__undl__" "$__rset__" \
		"$__undl__" "$__rset__" "$__undl__" "$__rset__"
	printf -- "Supported %soptions%s are:\n\n" "$__undl__" "$__rset__"
	printf -- "-d, --debug - (possibly) display some debug information on STDERR\n\n"
	printf -- "All unknown options are assumed to be normal arguments.\n\n"
	printf -- "The following properties are needed to create a valid key:\n\n"
	printf -- "%sprop1%s is the serial number of the device, it consists of 16 characters and can be found\n" "$__undl__" "$__rset__"
	printf -- "at the back of the device, together with other info printed on a sticker. But for a long\n"
	printf -- "time this serial number was only printed there and only the latest models contain this\n"
	printf -- "value in a place, where it can be read by the firmware. All older models used a character\n"
	printf -- "string of 16 zeroes here. You have to know, what value your device really uses - but you\n"
	printf -- "could try both approaches, if you've problems with a key version. The correct value can\n"
	printf -- "be found as %sSerialNumber%s in a support-data file or in an environment dump.\n\n" "$__undl__" "$__rset__"
	printf -- "%sprop2%s is the the value of the %smaca%s field from environment and it's used as Ethernet\n" "$__undl__" "$__rset__" "$__undl__" "$__rset__"
	printf -- "address (MAC) on the LAN side of a FRITZ!Box device. Its format is also well-known (6\n"
	printf -- "groups of two hexadecimal digits (upper case for A to Z), separated by colons) and the\n"
	printf -- "script verifies the format to ensure it's valid.\n\n"
	printf -- "The %sprop3%s value is the content of the pre-defined WLAN key (%swlan_key%s) from factory-\n" "$__undl__" "$__rset__" "$__undl__" "$__rset__"
	printf -- "settings and it can be found on the sticker too. It consists of 16 or 20 digits and the\n"
	printf -- "script verifies the expected format.\n\n"
	printf -- "The %sprop4%s value is only used, if the device in question is equipped with a CWMP account\n" "$__undl__" "$__rset__"
	printf -- "in its factory settings. Then the content of the %str069_passphrase%s entry is incorporated\n" "$__undl__" "$__rset__"
	printf -- "in the computation of a device-specific key.\n\n"
	printf -- "The third and fourth arguments (%swlan_key%s and %str069_passphrase%s) are optional (and the\n" "$__undl__" "$__rset__" "$__undl__" "$__rset__"
	printf -- "latter value may be missing on a device). If a device-specific key is intended to encrypt\n"
	printf -- "settings export files, FRITZ!OS versions will use only the first two properties to\n"
	printf -- "compute the key value.\n\n"
	exit 1
fi
########################################################################################################
#                                                                                                     #
# check debug option                                                                                  #
#                                                                                                     #
#######################################################################################################
if [ "$1" = "-d" -o "$1" = "--debug" ]; then
	debug=1
	shift
else
	debug=0
fi
#######################################################################################################
#                                                                                                     #
# check parameters                                                                                    #
#                                                                                                     #
#######################################################################################################
if [ $# -lt 2 ]; then
	printf "%sdevice_password%s: %sMissing the first two (mandatory) arguments.%s\a\n" "$__bold__$__red__" "$__rset__" "$__bold__" "$__rset__" 1>&2
	exit 1
fi
serial="$1"
if [ ${#serial} -ne 16 ]; then
	printf "%sdevice_password%s: %sThe specified serial number '%s' should contain exactly 16 characters.%s\a\n" "$__bold__$__red__" "$__rset__" "$__bold__" "$serial" "$__rset__" 1>&2
	exit 1
fi
maca="$2"
if [ ${#maca} -ne 17 ]; then
	printf "%sdevice_password%s: %sThe specified MAC address '%s' should contain exactly 17 characters.%s\a\n" "$__bold__$__red__" "$__rset__" "$__bold__" "$maca" "$__rset__" 1>&2
	exit 1
fi
wlan_key="$3"
if [ ${#wlan_key} -gt 0 ] && [ ${#wlan_key} -ne 16 ] && [ ${#wlan_key} -ne 20 ]; then
	printf "%sdevice_password%s: %sA correct WLAN key contains 16 or 20 (decimal) numbers, you specified this one: '%s'.%s\a\n" "$__bold__$__red__" "$__rset__" "$__bold__" "$wlan_key" "$__rset__" 1>&2
	exit 1
fi
if [ ${#wlan_key} -gt 0 ]; then
	if [ ${#4} -gt 0 ]; then # append TR-069 passphrase without newline
		wlan_key="$wlan_key$4"
	fi
fi
if ! [ "$(expr "$maca" : "\([A-F0-9:]*\)")" = "$maca" ]; then
	printf "%sdevice_password%s: %sThe specified MAC address '%s' contains unexpected characters.%s\a\n" "$__bold__$__red__" "$__rset__" "$__bold__" "$maca" "$__rset__" 1>&2
	exit 1
fi
#######################################################################################################
#                                                                                                     #
# compute the hash now                                                                                #
#                                                                                                     #
#######################################################################################################
printf "%s\n%s\n%s" "$serial" "$maca" "$wlan_key" | crypto digest $dbg
exit $?
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
