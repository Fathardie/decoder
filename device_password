#! /bin/sh
# vim: set tabstop=4 syntax=sh :
#######################################################################################################
#                                                                                                     #
# compute the device password for a FRITZ!Box router                                                  #
#                                                                                                     #
###################################################################################################VER#
#                                                                                                     #
# device_password, version 0.3, from decode_passwords                                                 #
#                                                                                                     #
# This script is a part of the project from https://github.com/PeterPawn/decode_passwords.            #
#                                                                                                     #
###################################################################################################CPY#
#                                                                                                     #
# Copyright (C) 2014-2017 P.Haemmerlein (peterpawn@yourfritz.de)                                      #
#                                                                                                     #
###################################################################################################LIC#
#                                                                                                     #
# This project is free software, licensed under a slightly modified GPL version; most people          #
# can redistribute it and/or modify it under the terms of the GNU General Public License as           #
# published by the Free Software Foundation; either version 2 of the License, or (at your             #
# option) any later version.                                                                          #
#                                                                                                     #
# This project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;           #
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.           #
# See the GNU General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more          #
# details.                                                                                            #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# The script takes the variable components of a FRITZ!Box device "identity" and computes the MD5 hash #
# used internally as device password for various encryptions. This isn't the same as the character    #
# string from "privatekeypassword", another project of mine on GitHub.                                #
#                                                                                                     #
# For this computation the following values are needed:                                               #
# - device serial number from the 'urlader environment' - it was 16 times '0' for a long time, but on #
#   newer devices AVM has really integrated the serial number from the back of the device             #
# - the content of 'maca' address from the 'urlader environment' - it can be taken from any contact   #
#   to the LAN side of the device or from various other network activities (where it's sometimes      #
#   called 'Serial' instead of the value above), JUIS check requests or TR-069 INFORM requests are a  #
#   commonly used source for this value, if you've only access to the WAN side of the box             #
# - the factory-set WLAN key - it's shown on the back of the router too and may be read with TR-069   #
#   functions or - if you've access to the GUI or a print-out of the current QR code and the owner    #
#   did not change the factory key - from a running device                                            #
# - if the device has a CWMP account configured, the value of 'tr069_passphrase' (also printed on the #
#   back of the device) is needed as another variable                                                 #
#                                                                                                     #
# No matter, where you did get the data from, the password is computed as a MD5 hash of these two,    #
# three or four components, with a newline character between them (but not after the WLAN key and a   #
# TR-069 passphrase).                                                                                 #
#                                                                                                     #
# If you'd like to compute the password for a configuration export file, which was created without a  #
# specified password, you may omit the WLAN key and the TR-069 passphrase and the computed hash value #
# can then be used to decrypt such a file.                                                            #
#                                                                                                     #
#######################################################################################################
usage_text()
{
	__purpose_hdr
	__nl "This script accepts up to four parameters on the command line (each of them stands for a"
	__nl "property from the urlader environment of a FRITZ!OS device) and generates a device-specific"
	__nl "encryption key from their values.\n"
	__nl "The generated key will be written as hexadecimal string to STDOUT.\n"
	__usage_hdr
	__usage_opt "options"; __usage_opt_end; __usage_arg "prop1"; __usage_arg "prop2"; __usage_opt "prop3" "$(__usage_opt "prop4")"
	__usage_end
	__options_hdr
	__option_debug
	__option_help
	__option_version
	__options_end
	__nl "The following properties are needed to create a valid key:\n"
	__nl; __undl "prop1"; printf " is the serial number of the device, it consists of 16 characters and can be found"
	__nl "at the back of the device, together with other info printed on a sticker. But for a long"
	__nl "time this serial number was only printed there and only the latest models contain this"
	__nl "value in a place, where it can be read by the firmware. All older models used a character"
	__nl "string of 16 zeros here. You have to know, what value your device really uses - but you"
	__nl "could try both approaches, if you've problems with a key version. The correct value can"
	__nl "be found as "; __undl "SerialNumber"; printf " in a support-data file or in an environment dump.\n"
	__nl; __undl "prop2"; printf " is the value of the "; __undl "maca"; printf " field from environment and it's used as Ethernet address"
	__nl "(MAC) on the LAN side of a FRITZ!Box device. Its format is also well-known (6 groups"
	__nl "of two hexadecimal digits (upper case for A to Z), separated by colons) and the script"
	__nl "verifies the format to ensure it's valid.\n"
	__nl "The "; __undl "prop3"; printf " value is the content of the pre-defined WLAN key ("; __undl "wlan_key"; printf ") from factory-"
	__nl "settings and it can be found on the sticker too. It consists of 16 or 20 digits and the"
	__nl "script verifies the expected format.\n"
	__nl "The "; __undl "prop4"; printf " value is only used, if the device in question is equipped with a CWMP account"
	__nl "in its factory settings. Then the content of the "; __undl "tr069_passphrase"; printf " entry is incorporated"
	__nl "in the computation of a device-specific key.\n"
	__nl "The third and fourth arguments ("; __undl "wlan_key"; printf " and "; __undl "tr069_passphrase"; printf ") are optional (and the"
	__nl "latter value may be missing on a device). If a device-specific key is intended to encrypt"
	__nl "settings export files, FRITZ!OS versions will use only the first two properties to"
	__nl "compute the key value."
}
. yf_usage_helpers
__required_scripts="crypto"
#######################################################################################################
#                                                                                                     #
# check parameters                                                                                    #
#                                                                                                     #
#######################################################################################################
$__help_option__
$__version_option__
$__debug_option__
$__options_end__
if [ $# -lt 2 ]; then
	__emsg "Missing the first two (mandatory) arguments."
	exit 1
fi
serial="$1"
if [ ${#serial} -ne 16 ]; then
	__emsg "The specified serial number '%s' should contain exactly 16 characters." "$serial"
	exit 1
fi
maca="$2"
if [ ${#maca} -ne 17 ]; then
	__emsg "The specified MAC address '%s' should contain exactly 17 characters." "$maca"
	exit 1
fi
wlan_key="$3"
if [ ${#wlan_key} -gt 0 ] && [ ${#wlan_key} -ne 16 ] && [ ${#wlan_key} -ne 20 ]; then
	__emsg "A correct WLAN key contains 16 or 20 (decimal) numbers, you specified this one: '%s'." "$wlan_key"
	exit 1
fi
if [ ${#wlan_key} -gt 0 ]; then
	if [ ${#4} -gt 0 ]; then # append TR-069 passphrase without newline
		wlan_key="$wlan_key$4"
	fi
fi
if ! [ "$(expr "$maca" : "\([A-F0-9:]*\)")" = "$maca" ]; then
	__emsg "The specified MAC address '%s' contains unexpected characters." "$maca"
	exit 1
fi
#######################################################################################################
#                                                                                                     #
# check environment                                                                                   #
#                                                                                                     #
#######################################################################################################
$__set_base_dir__
$__check_required_scripts__
#######################################################################################################
#                                                                                                     #
# compute the hash now                                                                                #
#                                                                                                     #
#######################################################################################################
printf "%s\n%s\n%s" "$serial" "$maca" "$wlan_key" | "$crypto" digest $__debug_text__
exit $?
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
